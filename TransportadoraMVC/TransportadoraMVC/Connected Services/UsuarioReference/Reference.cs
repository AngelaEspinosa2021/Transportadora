//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransportadoraMVC.UsuarioReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UsuarioReference.IServicioUsuario")]
    public interface IServicioUsuario {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ListarUsuarios", ReplyAction="http://tempuri.org/IServicioUsuario/ListarUsuariosResponse")]
        TranspService.Modelos.Usuario[] ListarUsuarios();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ListarUsuarios", ReplyAction="http://tempuri.org/IServicioUsuario/ListarUsuariosResponse")]
        System.Threading.Tasks.Task<TranspService.Modelos.Usuario[]> ListarUsuariosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/BuscarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/BuscarUsuarioResponse")]
        TranspService.Modelos.Usuario BuscarUsuario(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/BuscarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/BuscarUsuarioResponse")]
        System.Threading.Tasks.Task<TranspService.Modelos.Usuario> BuscarUsuarioAsync(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/AgregarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/AgregarUsuarioResponse")]
        void AgregarUsuario(TranspService.Modelos.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/AgregarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/AgregarUsuarioResponse")]
        System.Threading.Tasks.Task AgregarUsuarioAsync(TranspService.Modelos.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/EditarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/EditarUsuarioResponse")]
        void EditarUsuario(long Id, TranspService.Modelos.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/EditarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/EditarUsuarioResponse")]
        System.Threading.Tasks.Task EditarUsuarioAsync(long Id, TranspService.Modelos.Usuario usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ConfirmarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/ConfirmarUsuarioResponse")]
        void ConfirmarUsuario(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ConfirmarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/ConfirmarUsuarioResponse")]
        System.Threading.Tasks.Task ConfirmarUsuarioAsync(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/EliminarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/EliminarUsuarioResponse")]
        void EliminarUsuario(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/EliminarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/EliminarUsuarioResponse")]
        System.Threading.Tasks.Task EliminarUsuarioAsync(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/CambiarPassword", ReplyAction="http://tempuri.org/IServicioUsuario/CambiarPasswordResponse")]
        void CambiarPassword(long Id, string contraseñaActual, string nuevaContraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/CambiarPassword", ReplyAction="http://tempuri.org/IServicioUsuario/CambiarPasswordResponse")]
        System.Threading.Tasks.Task CambiarPasswordAsync(long Id, string contraseñaActual, string nuevaContraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ValidarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/ValidarUsuarioResponse")]
        TranspService.Modelos.Usuario ValidarUsuario(string txtUsuario, string txtPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioUsuario/ValidarUsuario", ReplyAction="http://tempuri.org/IServicioUsuario/ValidarUsuarioResponse")]
        System.Threading.Tasks.Task<TranspService.Modelos.Usuario> ValidarUsuarioAsync(string txtUsuario, string txtPassword);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioUsuarioChannel : TransportadoraMVC.UsuarioReference.IServicioUsuario, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioUsuarioClient : System.ServiceModel.ClientBase<TransportadoraMVC.UsuarioReference.IServicioUsuario>, TransportadoraMVC.UsuarioReference.IServicioUsuario {
        
        public ServicioUsuarioClient() {
        }
        
        public ServicioUsuarioClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioUsuarioClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioUsuarioClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioUsuarioClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TranspService.Modelos.Usuario[] ListarUsuarios() {
            return base.Channel.ListarUsuarios();
        }
        
        public System.Threading.Tasks.Task<TranspService.Modelos.Usuario[]> ListarUsuariosAsync() {
            return base.Channel.ListarUsuariosAsync();
        }
        
        public TranspService.Modelos.Usuario BuscarUsuario(long Id) {
            return base.Channel.BuscarUsuario(Id);
        }
        
        public System.Threading.Tasks.Task<TranspService.Modelos.Usuario> BuscarUsuarioAsync(long Id) {
            return base.Channel.BuscarUsuarioAsync(Id);
        }
        
        public void AgregarUsuario(TranspService.Modelos.Usuario usuario) {
            base.Channel.AgregarUsuario(usuario);
        }
        
        public System.Threading.Tasks.Task AgregarUsuarioAsync(TranspService.Modelos.Usuario usuario) {
            return base.Channel.AgregarUsuarioAsync(usuario);
        }
        
        public void EditarUsuario(long Id, TranspService.Modelos.Usuario usuario) {
            base.Channel.EditarUsuario(Id, usuario);
        }
        
        public System.Threading.Tasks.Task EditarUsuarioAsync(long Id, TranspService.Modelos.Usuario usuario) {
            return base.Channel.EditarUsuarioAsync(Id, usuario);
        }
        
        public void ConfirmarUsuario(long Id) {
            base.Channel.ConfirmarUsuario(Id);
        }
        
        public System.Threading.Tasks.Task ConfirmarUsuarioAsync(long Id) {
            return base.Channel.ConfirmarUsuarioAsync(Id);
        }
        
        public void EliminarUsuario(long Id) {
            base.Channel.EliminarUsuario(Id);
        }
        
        public System.Threading.Tasks.Task EliminarUsuarioAsync(long Id) {
            return base.Channel.EliminarUsuarioAsync(Id);
        }
        
        public void CambiarPassword(long Id, string contraseñaActual, string nuevaContraseña) {
            base.Channel.CambiarPassword(Id, contraseñaActual, nuevaContraseña);
        }
        
        public System.Threading.Tasks.Task CambiarPasswordAsync(long Id, string contraseñaActual, string nuevaContraseña) {
            return base.Channel.CambiarPasswordAsync(Id, contraseñaActual, nuevaContraseña);
        }
        
        public TranspService.Modelos.Usuario ValidarUsuario(string txtUsuario, string txtPassword) {
            return base.Channel.ValidarUsuario(txtUsuario, txtPassword);
        }
        
        public System.Threading.Tasks.Task<TranspService.Modelos.Usuario> ValidarUsuarioAsync(string txtUsuario, string txtPassword) {
            return base.Channel.ValidarUsuarioAsync(txtUsuario, txtPassword);
        }
    }
}
